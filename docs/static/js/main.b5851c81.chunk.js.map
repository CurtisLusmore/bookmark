{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","items","JSON","parse","localStorage","getItem","state","input","add","bind","assertThisInitialized","onChange","ev","target","value","setState","item","_ref","newItems","concat","toConsumableArray","setItem","stringify","_ref2","filter","_ref3","keyword","url","results","_this2","_this$state","matches","length","startsWith","react_default","a","createElement","Fragment","App_AddBookmark","map","_ref4","title","key","href","className","onClick","remove","id","placeholder","autoFocus","React","Component","AddBookmark","props","_this3","onSubmit","preventDefault","name","disabled","autoComplete","required","type","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8OAGMA,qBACJ,SAAAA,IAAc,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,OAEA,IAAMI,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,eAAiB,GAHnD,OAIZX,EAAKY,MAAQ,CACXC,MAAO,GACPN,SAEFP,EAAKc,IAAMd,EAAKc,IAAIC,KAATd,OAAAe,EAAA,EAAAf,CAAAD,IACXA,EAAKiB,SAAWjB,EAAKiB,SAASF,KAAdd,OAAAe,EAAA,EAAAf,CAAAD,IATJA,wEAYLkB,GACP,IAAML,EAAQK,EAAGC,OAAOC,MACxBjB,KAAKkB,SAAS,CAAER,sCAGdS,GACFnB,KAAKkB,SAAS,SAAAE,GAAe,IAAZhB,EAAYgB,EAAZhB,MACTiB,EAAQ,GAAAC,OAAAxB,OAAAyB,EAAA,EAAAzB,CAAQM,GAAR,CAAee,IAE7B,OADAZ,aAAaiB,QAAQ,YAAanB,KAAKoB,UAAUJ,IAC1C,CACLjB,MAAOiB,EACPX,MAAO,qCAKNS,GACLnB,KAAKkB,SAAS,SAAAQ,GAAe,IACrBL,EADqBK,EAAZtB,MACQuB,OAAO,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAASC,EAAZF,EAAYE,IAAZ,OAAsBD,IAAYV,EAAKU,SAAWC,IAAQX,EAAKW,MAE7F,OADAvB,aAAaiB,QAAQ,YAAanB,KAAKoB,UAAUJ,IAC1C,CACLjB,MAAOiB,sCAKJ,IAMHU,EANGC,EAAAhC,KAAAiC,EACkBjC,KAAKS,MAAtBC,EADDuB,EACCvB,MAAON,EADR6B,EACQ7B,MACT8B,EAA2B,IAAjBxB,EAAMyB,OAClB,KACA/B,EAAMuB,OAAO,SAAAR,GAAI,OAAIA,EAAKU,QAAQO,WAAW1B,KAoBjD,OAjBsBqB,EAAN,OAAZG,EAA4BG,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,MACJ,IAAnBN,EAAQC,OAAwBE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACvCH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAACE,EAAD,CAAaZ,QAASnB,EAAOC,IAAKX,KAAKW,OAE1B0B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACbH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACGL,EAAQQ,IAAI,SAAAC,GAAA,IAAGd,EAAHc,EAAGd,QAASC,EAAZa,EAAYb,IAAKc,EAAjBD,EAAiBC,MAAjB,OAA6BP,EAAAC,EAAAC,cAAA,MAAIM,IAAKhB,GACjDQ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGO,KAAMhB,GAAMc,IACnBP,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,SAAQV,EAAAC,EAAAC,cAAA,UAAQS,QAAS,kBAAMhB,EAAKiB,OAAO,CAAEpB,UAASC,UAA9C,WAI5BO,EAAAC,EAAAC,cAACE,EAAD,CAAaZ,QAASnB,EAAOC,IAAKX,KAAKW,OAGlC0B,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACpBV,EAAAC,EAAAC,cAAA,SAAOW,GAAG,QACRjC,MAAOP,EAAOI,SAAUd,KAAKc,SAC7BqC,YAAY,2BACZC,WAAW,IACZrB,UApEWsB,IAAMC,YAyElBC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAA3D,OAAAC,EAAA,EAAAD,CAAAE,KAAAuD,IACjBE,EAAA3D,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyD,GAAApD,KAAAH,KAAMwD,KAEDE,SAAWD,EAAKC,SAAS9C,KAAdd,OAAAe,EAAA,EAAAf,CAAA2D,IAHCA,wEAMV1C,GACP,IAAMc,EAAU7B,KAAKwD,MAAM3B,QACrBC,EAAMf,EAAGC,OAAOc,IAAIb,MACpB2B,EAAQ7B,EAAGC,OAAO4B,MAAM3B,MAG9B,OAFAF,EAAG4C,iBACH3D,KAAKwD,MAAM7C,IAAI,CAAEkB,UAASC,MAAKc,WACxB,mCAGA,IACCf,EAAY7B,KAAKwD,MAAjB3B,QAER,OAAOQ,EAAAC,EAAAC,cAAA,QAAMmB,SAAU1D,KAAK0D,UAC1BrB,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,SAAOqB,KAAK,UAAUC,UAAU,EAAM5C,MAAOY,EAASsB,YAAY,YAClEd,EAAAC,EAAAC,cAAA,SAAOqB,KAAK,MAAMT,YAAY,uBAAuBW,aAAa,MAAMC,UAAQ,EAACC,KAAK,QACtF3B,EAAAC,EAAAC,cAAA,SAAOqB,KAAK,QAAQT,YAAY,QAAQW,aAAa,MAAMC,UAAQ,IACnE1B,EAAAC,EAAAC,cAAA,SAAOyB,KAAK,SAAS/C,MAAM,yBAxBPoC,IAAMC,WA6BjB1D,IC7FTqE,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBvE,QACfiE,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,UAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC3FjEC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SDiB1C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,GAAwB7B,OAAOC,SAAStB,MACpDmD,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,OAAQ,WAC9B,IAAM1B,EAAK,GAAAlD,OAAM0E,GAAN,sBAEP/B,GAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,GACHK,KAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,KAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,KAAK,WAC7BV,OAAOC,SAASwC,aAKpBrC,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IACN,mEArFAwB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,KAAK,WACjCO,QAAQC,IACN,gHAMJd,EAAgBC,EAAOC,MCxC/BE","file":"static/js/main.b5851c81.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    const items = JSON.parse(localStorage.getItem('bookmarks')) || [];\n    this.state = {\n      input: '',\n      items\n    };\n    this.add = this.add.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(ev) {\n    const input = ev.target.value;\n    this.setState({ input });\n  }\n\n  add(item) {\n    this.setState(({ items }) => {\n      const newItems = [ ...items, item ];\n      localStorage.setItem('bookmarks', JSON.stringify(newItems));\n      return {\n        items: newItems,\n        input: ''\n      };\n    });\n  }\n\n  remove(item) {\n    this.setState(({ items }) => {\n      const newItems = items.filter(({ keyword, url }) => keyword !== item.keyword || url !== item.url);\n      localStorage.setItem('bookmarks', JSON.stringify(newItems));\n      return {\n        items: newItems\n      };\n    })\n  }\n\n  render() {\n    const { input, items } = this.state;\n    const matches = input.length === 0\n      ? null\n      : items.filter(item => item.keyword.startsWith(input));\n\n    let results;\n    if (matches === null) results = <></>;\n    else if (matches.length === 0) results = <>\n      <p>No matches...</p>\n      <AddBookmark keyword={input} add={this.add}/>\n      </>;\n    else results = <>\n      <table>\n        <tbody>\n          {matches.map(({ keyword, url, title }) => <tr key={keyword}>\n            <td><a href={url}>{title}</a></td>\n            <td className=\"right\"><button onClick={() => this.remove({ keyword, url })}>x</button></td>\n          </tr>)}\n        </tbody>\n      </table>\n      <AddBookmark keyword={input} add={this.add}/>\n    </>;\n\n    return <div className=\"App\">\n      <input id=\"input\"\n        value={input} onChange={this.onChange}\n        placeholder=\"Search for a bookmark...\"\n        autoFocus={true} />\n      {results}\n    </div>\n  }\n}\n\nclass AddBookmark extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onSubmit(ev) {\n    const keyword = this.props.keyword,\n          url = ev.target.url.value,\n          title = ev.target.title.value;\n    ev.preventDefault();\n    this.props.add({ keyword, url, title });\n    return false;\n  }\n\n  render() {\n    const { keyword } = this.props;\n\n    return <form onSubmit={this.onSubmit}>\n      <p>Or add a new bookmark</p>\n      <input name=\"keyword\" disabled={true} value={keyword} placeholder=\"keyword\" />\n      <input name=\"url\" placeholder=\"https://example.com/\" autoComplete=\"off\" required type=\"url\"/>\n      <input name=\"title\" placeholder=\"Title\" autoComplete=\"off\" required />\n      <input type=\"submit\" value=\"Add Bookmark\" />\n    </form>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}