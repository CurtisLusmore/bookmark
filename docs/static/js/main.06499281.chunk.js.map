{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","items","JSON","parse","localStorage","getItem","state","input","matches","add","bind","assertThisInitialized","onChange","onSubmit","ev","target","value","setState","_ref","length","filter","item","keyword","startsWith","preventDefault","window","location","url","_ref2","newItems","concat","toConsumableArray","setItem","stringify","_ref3","_ref4","newMatches","_ref5","results","_this2","_this$state","react_default","a","createElement","Fragment","App_AddBookmark","map","_ref6","title","key","href","className","onClick","remove","id","placeholder","autoFocus","React","Component","AddBookmark","props","_this3","name","disabled","autoComplete","required","type","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06499281.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    const items = JSON.parse(localStorage.getItem('bookmarks')) || [];\n    this.state = {\n      input: '',\n      items,\n      matches: null\n    };\n    this.add = this.add.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onChange(ev) {\n    const input = ev.target.value;\n    this.setState(({ items }) => ({\n      input,\n      matches: input.length === 0\n      ? null\n      : items.filter(item => item.keyword.startsWith(input)) }));\n  }\n\n  onSubmit(ev) {\n    ev.preventDefault();\n\n    const { matches } = this.state;\n    if (matches.length === 1) { window.location = matches[0].url; }\n    return false;\n  }\n\n  add(item) {\n    this.setState(({ items }) => {\n      const newItems = [ ...items, item ];\n      localStorage.setItem('bookmarks', JSON.stringify(newItems));\n      return {\n        items: newItems,\n        input: '',\n        matches: null\n      };\n    });\n  }\n\n  remove(item) {\n    this.setState(({ items, matches }) => {\n      const newItems = items.filter(({ keyword, url }) => keyword !== item.keyword || url !== item.url);\n      const newMatches = matches.filter(({ keyword, url }) => keyword !== item.keyword || url !== item.url);\n      localStorage.setItem('bookmarks', JSON.stringify(newItems));\n      return {\n        items: newItems,\n        matches: newMatches\n      };\n    })\n  }\n\n  render() {\n    const { input, matches } = this.state;\n\n    let results;\n    if (matches === null) results = <></>;\n    else if (matches.length === 0) results = <>\n      <p>No matches...</p>\n      <AddBookmark keyword={input} add={this.add}/>\n      </>;\n    else results = <>\n      <table>\n        <tbody>\n          {matches.map(({ keyword, url, title }) => <tr key={keyword}>\n            <td><a href={url}>{title}</a></td>\n            <td className=\"right\"><button onClick={() => this.remove({ keyword, url })}>x</button></td>\n          </tr>)}\n        </tbody>\n      </table>\n      <AddBookmark keyword={input} add={this.add}/>\n    </>;\n\n    return <div className=\"App\">\n      <form onSubmit={this.onSubmit}>\n        <input id=\"input\"\n          value={input} onChange={this.onChange}\n          placeholder=\"Search for a bookmark...\"\n          autoFocus={true} />\n      </form>\n      {results}\n    </div>\n  }\n}\n\nclass AddBookmark extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onSubmit(ev) {\n    const keyword = this.props.keyword,\n          url = ev.target.url.value,\n          title = ev.target.title.value;\n    ev.preventDefault();\n    this.props.add({ keyword, url, title });\n    return false;\n  }\n\n  render() {\n    const { keyword } = this.props;\n\n    return <form onSubmit={this.onSubmit}>\n      <p>Or add a new bookmark</p>\n      <input name=\"keyword\" disabled={true} value={keyword} placeholder=\"keyword\" />\n      <input name=\"url\" placeholder=\"https://example.com/\" autoComplete=\"off\" required type=\"url\"/>\n      <input name=\"title\" placeholder=\"Title\" autoComplete=\"off\" required />\n      <input type=\"submit\" value=\"Add Bookmark\" />\n    </form>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}